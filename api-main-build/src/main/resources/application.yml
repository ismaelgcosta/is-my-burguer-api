logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR

management:
  endpoints:
    web:
      base-path: /rest/actuator
      exposure:
        include: '*'
springdoc:
  version: '@springdoc.version@'
  swagger-ui:
    display-request-duration: true
    groups-order: DESC
    operationsSorter: method
    disable-swagger-default-url: true
    use-root-path: true
    show-actuator: true
  show-actuator: true
  cache:
    disabled: true
server:
  forward-headers-strategy: framework
aws:
  api-gateway: https://${AWS_API_GATEWAY_ID}.execute-api.${AWS_REGION}.amazonaws.com
  region: ${AWS_REGION}
  cognito:
    client-id: ${CLIENT_CREDENTIALS_ID}
    client-secret: ${CLIENT_CREDENTIALS_SECRET}
    domain: ${CLIENT_DOMAIN}
    user-pool-id: ${AWS_COGNITO_USER_POOL_ID}
spring:
  security:
    oauth2:
      client:
        registration:
          cognito:
            client-id: ${CLIENT_CREDENTIALS_ID}
#            clientName: ${aws.cognito.client-name}
#            scope: aws.cognito.signin.user.admin,email,openid,phone,profile

        provider:
          cognito:
            authorization-uri: https://${aws.cognito.domain}.auth.${aws.region}.amazoncognito.com/oauth2/authorize
            token-uri: https://${aws.cognito.domain}.auth.${aws.region}.amazoncognito.com/oauth2/token
            user-info-uri: https://${aws.cognito.domain}.auth.${aws.region}.amazoncognito.com/oauth2/userInfo
            jwk-set-uri: https://cognito-idp.${aws.region}.amazonaws.com/${aws.cognito.user-pool-id}/.well-known/jwks.json
            issuerUri: https://cognito-idp.${aws.region}.amazonaws.com/${aws.cognito.user-pool-id}
            user-name-attribute: username
            authorization-grant-type: authorization_code

        resourceserver:
          cognito:
            jws-algorithms: RS256
            jwk-set-uri: https://cognito-idp.${aws.region}.amazonaws.com/${aws.cognito.user-pool-id}/.well-known/jwks.json
            issuer-uri: https://cognito-idp.${aws.region}.amazonaws.com/${aws.cognito.user-pool-id}

        thymeleaf:
          cache: false
  liquibase:
    enabled: true
  # Quartz
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: true
  # Docker
  thread-executor: standard
  docker:
    compose:
      # para testar em ambiente kubernetes local (docker desktop, minikube, etc)
      enabled: true
      file: compose-base.yaml
      ports:
        - '5005:5005'
      volumes:
        - postgres-ismyburguer:/var/lib/postgresql/data
        - mongodb-ismyburguer:/data/db

# Database - Postgres
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/ismyburguer
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}

# Database - H2 - PARA TESTES
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:ismyburguer
#    username: test
#    password: test
#  h2:
#    console:
#      enabled: false
#      settings:
#        web-allow-others: false

  # JPA properties
  jpa:
    hibernate:
      ddl-auto: none # When you launch the application for the first time - switch "none" at "create"
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    show-sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false
    properties:
      hibernate:
        default_schema: public
        default_catalog: public